name: Frontend CD

on:
  push:
    paths:
      - '**/frontend/**'
      - './github/workflows/frontend-cd.yaml'
    branches:
      - 'main'
  workflow_dispatch:

defaults:
  run:
    shell: bash
    working-directory: ./starter/frontend

env:
  AWS_REGION: us-east-1
  REPOSITORY: frontend

jobs:
  lint-test-build:
    uses: ./.github/workflows/frontend-ci.yaml
    name: Frontend CI

  push-to-ecr:
    name: push to ecr
    needs: lint-test-build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./starter/frontend
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'false'

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> "$GITHUB_ENV"
          docker build --build-arg=REACT_APP_MOVIE_API_URL=${{ vars.REACT_APP_MOVIE_API_URL }} -t $REGISTRY/${{ env.REPOSITORY }}:$IMAGE_TAG .
          docker push $REGISTRY/${{ env.REPOSITORY }}:$IMAGE_TAG

  deploy-to-eks:
    name: Frontend CD
    needs: push-to-ecr
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./starter/frontend/k8s
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Update kubeconfig for EKS cluster
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name cluster

      # - name: Setup Kustomize
      #   uses: imranismail/setup-kustomize@v2
      #   with:
      #     kustomize-version: '5.0.0'

      - name: Get ecr repo uri and tag
        run: |
          LATEST_IMAGE=$(aws ecr describe-images \
            --repository-name frontend \
            --query 'sort_by(imageDetails,& imagePushedAt)[-1]' \
            --output json)

          REPO_URI=$(aws ecr describe-repositories \
            --repository-names frontend \
            --query 'repositories[0].repositoryUri' \
            --output text)

          TAG=$(echo $LATEST_IMAGE | jq -r '.imageTags[0]')

          echo "REPO_URI=$REPO_URI" >> "$GITHUB_ENV"
          echo "TAG=$TAG" >> "$GITHUB_ENV"

      # - name: Build and apply | Deploy with Kustomize
      #   run: |
      #     kustomize edit set image frontend=$REPO_URI:$TAG
      #     kustomize build | kubectl apply -f -

      - name: Deploy to EKS
        run: |
          kubectl apply -f -
          kubectl set image deployment/frontend frontend=$REGISTRY/${{ env.REPOSITORY }}:${{ github.sha }}
